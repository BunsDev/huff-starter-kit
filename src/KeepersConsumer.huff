// SPDX-License-Identifier: MIT

/* Interface */
#define function counter() view returns (uint256)
#define function interval() view returns (uint256)
#define function checkUpkeep(bytes) view returns (bool, bytes)
#define function performUpkeep(bytes) nonpayable returns()
#define function lastTimeStamp() view returns(uint256)

/* Overriden Constants */
#define constant INTERVAL = 0x0000000000000000000000000000000000000000 // Will be overrided at deploy time

/* Storage Slots */
#define constant COUNTER_LOCATION = FREE_STORAGE_POINTER()
#define constant LAST_TIME_STAMP_LOCATION = FREE_STORAGE_POINTER()

/* Macros */
#define macro GET_COUNTER() = takes (0) returns (0) {
    // Load value from storage.
    [COUNTER_LOCATION] sload   

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro GET_LAST_TIME_STAMP() = takes (0) returns (0) {
    // Load value from storage.
    [LAST_TIME_STAMP_LOCATION] sload   

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro GET_INTERVAL() = takes (0) returns (0) {
    // store INTERVAL in memory
    [INTERVAL] 0x00 mstore
    // Return it
    0x20 0x00 return
}

#define macro CHECK_UPKEEP_RETURNS() = takes (0) returns (0) {
    // First, we populate the stack from CHECK_UPKEEP
    CHECK_UPKEEP() // [time_comparison]
    0x00 0x20 0x00 // [0x00, 0x20, 0x00, time_comparison]
    mstore mstore // Then, we store the values in memory. The time_comparison result, and an empty bytes object.
    0x40 0x00 return // Then we return it all!
}

#define macro CHECK_UPKEEP() = takes (0) returns (1) {
    // We just totally ignore the bytes calldata if sent

    // Put timestamp difference on stack
    [LAST_TIME_STAMP_LOCATION] sload      // [LAST_TIME_STAMP_LOCATION]
    timestamp                             // [timestamp, LAST_TIME_STAMP_LOCATION]
    sub                                   // [different_in_time]

    // Put the interval on the stack, and then compare
    [INTERVAL]                            // [INTERVAL, different_in_time]
    lt                                    // [time_comparison]
}

#define macro PERFORM_UPKEEP() = takes (0) returns (0) {
    // We just totally ignore the bytes calldata if sent

    // First, we make sure checkupkeep is good
    CHECK_UPKEEP()                         // [time_comparison]
    iszero                                 // [time_comparison == 0] 

    // Revert if checkUpkeep is false!
    fail jumpi 

    // Else, we increment & update timestamp
    // Update Timestamp
    timestamp                  // [timestamp]
    [LAST_TIME_STAMP_LOCATION] // [LAST_TIME_STAMP_LOCATION, timestamp]
    sstore                     // []

    // Increment Counter
    [COUNTER_LOCATION] sload   // [Counter]
    0x1                        // [0x1, Counter]
    add                        // [Counter + 1]

    [COUNTER_LOCATION]         // [Counter + 1, COUNTER_LOCATION]
    sstore                     // [] Store and update the new counter variable
    stop
    
    fail:
        0x00 0x00 revert
}

/* Special Macros */
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr

    dup1 __FUNC_SIG("counter()") eq counter jumpi 
    dup1 __FUNC_SIG("interval()") eq interval jumpi 
    dup1 __FUNC_SIG("checkUpkeep(bytes)") eq checkUpkeep jumpi 
    dup1 __FUNC_SIG("performUpkeep(bytes)") eq performUpkeep jumpi 
    dup1 __FUNC_SIG("lastTimeStamp()") eq lastTimeStamp jumpi 

    counter: 
        GET_COUNTER()
    interval: 
        GET_INTERVAL()
    checkUpkeep:
        CHECK_UPKEEP_RETURNS()
    performUpkeep:
        PERFORM_UPKEEP()
    lastTimeStamp:
        GET_LAST_TIME_STAMP()
}

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Store the current timestamp to storage
    timestamp                  // [timestamp]
    [LAST_TIME_STAMP_LOCATION] // [LAST_TIME_STAMP_LOCATION, timestamp]
    sstore                     // []
}